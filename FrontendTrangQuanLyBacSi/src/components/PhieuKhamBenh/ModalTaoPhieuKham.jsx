import {
  Button,
  Col,
  Form,
  Input,
  message,
  notification,
  Row,
  Modal,
} from "antd";
import { useEffect, useState } from "react";
import { FaSave } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { fetchBacSiByMaBS, fetchLayTTPhieuKhamBenh, updateTTPhieuKhamBenh } from "../../services/apiDoctor";
import { doLogoutAction } from "../../redux/account/accountSlice";
import { taoPhieuKhamBenh } from "../../services/apiDoctor";

const ModalTaoPhieuKham = ({ isModalOpen, setIsModalOpen, editingRecord}) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [formPhieuKham] = Form.useForm();
  const [dataAccBS, setDataAccBS] = useState(null);
  const [dataPhieuKham, setDataPhieuKham] = useState(null);
  const user = useSelector((state) => state.accountDoctor.user);

 // L·∫•y th√¥ng tin b√°c sƒ©
 const fetchDoctorInfo = async (maBacSi) => {
  let res = await fetchBacSiByMaBS(maBacSi);
  if (res && res.data) {
    setDataAccBS(res.data);
  }
};

useEffect(() => {
  if (user?.maBacSi) {
    fetchDoctorInfo(user.maBacSi);
  }
}, [user]);

// Khi modal m·ªü, set c√°c gi√° tr·ªã c·ªßa form theo th√¥ng tin l·ªãch kh√°m
useEffect(() => {
  if (editingRecord) {
    const maLichKham = editingRecord?.maLich;
    const ngayKham = editingRecord?.ngayKham;
    const khungGio = editingRecord?.khungGio;
    // G·ªçi API l·∫•y th√¥ng tin phi·∫øu kh√°m t·ª´ l·ªãch kh√°m, ng√†y kh√°m, khung gi·ªù
    fetchPhieuKhamBenh(maLichKham, ngayKham, khungGio);
  }
}, [editingRecord]);

console.log("editingRecord: ", editingRecord);

// Fetch phieuKham information based on L·ªãch kh√°m, Ng√†y kh√°m, Khung gi·ªù
const fetchPhieuKhamBenh = async (maLichKham, ngayKham, khungGio) => {
  if (!maLichKham || !ngayKham || !khungGio) return null;

  try {
    console.log("Fetching phi·∫øu kh√°m v·ªõi: ", {
      maLichKham,
      ngayKham,
      khungGio
    });

    const res = await fetchLayTTPhieuKhamBenh(maLichKham, ngayKham, khungGio);
    console.log("K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API: ", res);

    if (res) {
      setDataPhieuKham(res);
    } // Set the fetched data to state
    } catch (error) {
    console.error("Error fetching phieuKham:", error);
  }
};


 // Khi modal m·ªü, set form values d·ª±a tr√™n th√¥ng tin l·ªãch kh√°m n·∫øu c√≥
 useEffect(() => {
  if (editingRecord) {
    const init = {
      idHoSo: editingRecord?.maHoSo,
      idBS: editingRecord?.maBacSi || dataAccBS?.maBacSi,
      idLK: editingRecord?.maLich,
      hoTen: editingRecord?.hoTen || '',
      khungGio: editingRecord?.khungGio || '',
      ngayKham: editingRecord?.ngayKham || '',
      tienSu: editingRecord?.tienSu || '',
      chuanDoan: editingRecord?.chuanDoan || '',
      lyDoKham: editingRecord?.lyDoKham || ''
    };
    
    // Set form values t·ª´ editingRecord n·∫øu c√≥
    formPhieuKham.setFieldsValue(init);
  }

  // N·∫øu ƒë√£ c√≥ dataPhieuKham, th√¨ update l·∫°i c√°c gi√° tr·ªã trong form
  if (dataPhieuKham && typeof dataPhieuKham === 'object' && dataPhieuKham.maPhieu) {
    formPhieuKham.setFieldsValue({
      idPK: dataPhieuKham?.maPhieu,
      idHoSo: dataPhieuKham?.maHoSo,
      idBS: dataPhieuKham?.maBacSi,
      idLK: dataPhieuKham?.maLichKham,
      hoTen: dataPhieuKham?.hoTenBenhNhan,
      khungGio: dataPhieuKham?.khungGioKham || '',
      ngayKham: dataPhieuKham?.ngayKham,
      tienSu: dataPhieuKham?.tienSu,
      chuanDoan: dataPhieuKham?.chanDoan,
      lyDoKham: dataPhieuKham?.lyDoKham
    });
  }
}, [editingRecord, dataAccBS, dataPhieuKham]);


  console.log("dataPhieuKham: ", dataPhieuKham);

  const onFinishTaoPhieuKham = async (values) => {
    try {
      const maHoSo = parseInt(values.idHoSo, 10);
      const maBacSi = parseInt(values.idBS, 10);
      const maLichKham = parseInt(values.idLK, 10);
  
      if (isNaN(maHoSo) || isNaN(maBacSi)) {
        notification.error({
          message: "‚ùå T·∫°o phi·∫øu kh√°m th·∫•t b·∫°i!",
          description: "M√£ h·ªì s∆° ho·∫∑c m√£ b√°c sƒ© kh√¥ng h·ª£p l·ªá.",
        });
        return;
      }
  
      console.log("D·ªØ li·ªáu g·ª≠i t·ª´ frontend: ", {
        maHoSo: values.idHoSo,
        maBacSi: values.idBS,
        maLichKham: values.idLK,
        hoTen: values.hoTen,
        khungGio: values.khungGio,
        ngayKham: values.ngayKham,
        tienSu: values.tienSu,
        chuanDoan: values.chuanDoan,
        lyDoKham: values.lyDoKham
      });
  
      // G·ª≠i request ƒë·ªÉ t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t phi·∫øu kh√°m
      let result;
      if (dataPhieuKham?.maPhieu) {
        // N·∫øu phi·∫øu kh√°m ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t l·∫°i
        result = await updateTTPhieuKhamBenh(
          dataPhieuKham.maPhieu, // id phi·∫øu kh√°m
          values.tienSu,
          values.chuanDoan,
          values.lyDoKham
        );
      } else {
        // N·∫øu phi·∫øu kh√°m ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
        result = await taoPhieuKhamBenh(
          maHoSo, 
          maBacSi,
          maLichKham,
          values.hoTen,
          values.ngayKham,
          values.khungGio,
          values.tienSu,
          values.chuanDoan,
          values.lyDoKham
        );
      }
  
      let res = result;
      if (typeof res === "string") {
        res = JSON.parse(res); // üî• √©p JSON string th√†nh object
      }
      if (res && res.status) {
        message.success(res.message || (dataPhieuKham.maPhieu ? "C·∫≠p nh·∫≠t phi·∫øu kh√°m th√†nh c√¥ng!" : "T·∫°o phi·∫øu kh√°m th√†nh c√¥ng!"));
  
        // Fetch updated phi·∫øu kh√°m info v√† c·∫≠p nh·∫≠t l·∫°i form
        // const phieuKhamInfo = await fetchPhieuKhamBenh(maHoSo, maLichKham, values.ngayKham, values.khungGio);
        // setDataPhieuKham(phieuKhamInfo);
        // formPhieuKham.setFieldsValue({
        //   idPK: phieuKhamInfo?.maPhieu,
        //   idHoSo: phieuKhamInfo?.maHoSo,
        //   idBS: phieuKhamInfo?.maBacSi,
        //   idLK: phieuKhamInfo?.maLichKham,
        //   hoTen: phieuKhamInfo?.hoTenBenhNhan,
        //   khungGio: phieuKhamInfo?.khungGioKham,
        //   ngayKham: phieuKhamInfo?.ngayKham,
        //   tienSu: phieuKhamInfo?.tienSu,
        //   chuanDoan: phieuKhamInfo?.chanDoan,
        //   lyDoKham: phieuKhamInfo?.lyDoKham
        // });
        
        // Chuy·ªÉn sang trang doctor sau khi t·∫°o ho·∫∑c c·∫≠p nh·∫≠t th√†nh c√¥ng
        navigate("/doctor");
        setIsModalOpen(false);
      } else {
        notification.error({
          message: "‚ùå T·∫°o/ C·∫≠p nh·∫≠t phi·∫øu kh√°m th·∫•t b·∫°i!",
          description: res?.message || "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.",
        });
      }
    } catch (error) {
      notification.error({
        message: "L·ªói h·ªá th·ªëng",
        description: error.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.",
      });
    }
  };
  


// H√†m ƒë√≥ng modal
const handleCancel = () => {
  setIsModalOpen(false);
};
// H√†m x·ª≠ l√Ω ƒë·ªÉ ki·ªÉm tra n·∫øu c√≥ maPhieu trong dataPhieuKham
const isExistingPhieuKham = dataPhieuKham && dataPhieuKham.maPhieu;
return (
  <Modal
    visible={isModalOpen}
    onCancel={handleCancel}
    footer={null}
    width={800}
  >
    <Form form={formPhieuKham} layout="vertical" onFinish={onFinishTaoPhieuKham}>
      <Row>
        <Col span={24} style={{ padding: "0 0 20px", fontSize: "18px", textAlign: "center" }}>
          <span style={{ fontWeight: "500", color: "navy" }}>PHI·∫æU KH√ÅM B·ªÜNH</span>
        </Col>
      </Row>
      <Row gutter={[20, 10]}>
        <Col span={24} md={24} sm={24} xs={24}>
        <Form.Item name="idHoSo" hidden>
            <Input hidden />
          </Form.Item>
          <Form.Item name="idBS" hidden>
            <Input hidden />
          </Form.Item>
          <Form.Item name="idAcc" hidden>
            <Input hidden />
          </Form.Item>
          <Form.Item name="idLK" hidden>
            <Input hidden />
          </Form.Item>
          <Form.Item name="idPK" hidden>
            <Input hidden />
          </Form.Item>
        </Col>
        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="H·ªç v√† t√™n" name="hoTen" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n b·ªánh nh√¢n!" }]}>
            <Input placeholder="Nh·∫≠p h·ªç v√† t√™n b·ªánh nh√¢n" />
          </Form.Item>
        </Col>

        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="Khung gi·ªù kh√°m" name="khungGio">
            <Input placeholder="Khung gi·ªù kh√°m" />
          </Form.Item>
        </Col>

        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="Ng√†y kh√°m" name="ngayKham" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ng√†y kh√°m!" }]}>
            <Input type="date" placeholder="Ch·ªçn ng√†y kh√°m" />
          </Form.Item>
        </Col>

        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="L√Ω do kh√°m" name="lyDoKham" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p l√Ω do kh√°m!" }]}>
            <Input.TextArea rows={4} placeholder="Nh·∫≠p l√Ω do kh√°m" />
          </Form.Item>
        </Col>

        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="Ti·ªÅn s·ª≠ b·ªánh" name="tienSu" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti·ªÅn s·ª≠ b·ªánh!" }]}>
            <Input.TextArea rows={4} placeholder="Nh·∫≠p ti·ªÅn s·ª≠ b·ªánh" />
          </Form.Item>
        </Col>

        <Col span={12} md={12} sm={24} xs={24}>
          <Form.Item label="Chu·∫©n ƒëo√°n" name="chuanDoan" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p chu·∫©n ƒëo√°n b·ªánh!" }]}>
            <Input.TextArea rows={4} placeholder="Nh·∫≠p chu·∫©n ƒëo√°n b·ªánh" />
          </Form.Item>
        </Col>


        <Col span={24} style={{ display: "flex", justifyContent: "center" }}>
          <Button
            onClick={() => formPhieuKham.submit()}
            type="primary"
            size="large"
            icon={<FaSave size={25} />}
            style={{ width: "300px", height: "50px", background:"#2A95BF"}}
          >
             {isExistingPhieuKham ? "C·∫¨P NH·∫¨T PHI·∫æU KH√ÅM" : "T·∫†O PHI·∫æU KH√ÅM"}
          </Button>
        </Col>
      </Row>
    </Form>
  </Modal>
);
};

export default ModalTaoPhieuKham;
